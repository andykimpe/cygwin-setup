This directory contains the source code for the Setup program
for the Cygwin net releases.


HOW TO BUILD:
-------------
Setup should build out-of-the-box on any Cygwin environment that has all the
required packages installed:
  - gcc-mingw-g++
  - make
  - mingw-zlib
  - mingw-bzip2

The following additional packages are required if building from CVS, not from
a source tarball, or if you want to make changes to the build system.
  - autoconf-devel
  - automake-devel
  - libtool-devel

Build commands:
1) Skip this step if building from a source tarball.
   $ ./bootstrap.sh

2) Configure using the following set of options.
   $ ./configure -C --disable-shared --host=i686-pc-mingw32 \
       --build=i686-pc-cygwin CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"
   If you plan to do any work on the setup build system, you will
   probably want to add "--enable-maintainer-mode".

3) $ make

4) Wondering why your binary is so much bigger than the official releases?
   Remove debugging symbols:
   $ strip -s setup.exe
   Compress using UPX:
   $ upx -9 setup.exe


ABOUT BRANCHES:
---------------
Main setup development usually occurs on trunk. Releases are made from branches
named setup-YYYYMM. We do not have a defined stabilization period between the
creation of the release branch and the first release - instead, we decide on
a case by case basis, considering how rapid the recent development on trunk has
been.


CODING GUIDELINES:
------------------
setup has a number of different code formats in it. This is ok as long
as it stays readable. I'll accept patches (if anyone wants to do it :})
to standardise towards what I'm laying out here. But: thats not needed!
Mainly, as code is changed, either leave well enough alone, or refactor
what you are working on accordingly.

The GNU standards are acceptable, but:
They don't explicitly cover C++, and C++ has a number of challenges that
are not met by them. 
If you choose not to follow the GNU standards, then you should follow
these:
* classes or structs to be FirstLetterCapitalised.
* static members and globals to be FirstLetterCapitalised.
* local variables and non-static members to be
capitalisedAfterTheFirstWord.
* hungarian notation is banned.
* Try to keep functions less than 15 lines in length.
* Try to avoid using return values with non-query methods.
* Use classes rather than static functions.
* Place all methods for a single class in a single file. (* Libraries
may need multiple files, this is for setup.exe's source itself)
* Name the source file for classes and their headers after the class.
Capitalise it identically. Where pragmatism requires, try to be as close
as possible (see for instance, String++.h).


SUBMITTING A PATCH:
-------------------
As per cygwin1.dll:
no changelog in the patch itself.
attach the changelog to the email.
new files are ok in the patch, or as attachments.
ChangeLog as per GNU standards.
One goal per patch. (*)
Multiple patches per email accepted, but my preference is for one patch
per email.


TODO:
-----
 * Don't downgrade if the curr version is <= installed?
 * Support rpm/deb files for reading the package from. (To allow the
   maintainers the use of rpm/deb tools to create packages.)
 * Make a librar(y|ies) for setup and cygcheck to use containing 
   1) Something to translate POSIX -> native.  Currently called "cygpath"
      in setup, although this is probably a bad choice of name.
   2) Something to return the list of installed packages.
   3) Something to return the cygwin mount table.  Currently, I have implemented
      a lightweight setmntent and getmntent using the code in 
   4) Something to parse a tar file name into package/version or alternatively,
      return that information from 2)
   5) Something to return a list of files associated with a package.
 * Mark versions as prev/curr/test in the GUI when clicking through them.
 * Make setup.exe available through Add/Remove
 * Chooser scrollbar sometimes lost with odd font sizes.
 * Cancelling during MD5 check just stops the GUI updating until the check
   completes, and then continues with setup as if Cancel had not been clicked. 
 * Toggling from All Default to All Install takes *way* too long.
 * Remove installed packages from Misc when other (non-All) categories are
   found.
 * Local package scan stops updating when it stops being the active window.

 	   
WISHLIST:
---------
 * Some way to download *all* the source.
 * When clicking on a category that is showing a partial list (auto added items
   due to dependencies) show the full list rather than minimizing.
 * Incremental/recoverable download capability.
 * Build-depends.
 * FTP control connections should be closed when we are awaiting user input.
 * Show a sdesc for each category.
 * Add friendly error reporting to simpsock.cc.
 * Scan newly installed files for README files, show list to user, let them
   read them if they want.
 * Mouse wheel support broken/missing for *some* users.
 * When in category view, and changing from prev->normal->exp the categories
   get collapsed. This is non-intuitive.
 * mirrors.lst to be copied to setup.ini and cached locally. Then the master
   mirrors list is reserved for bootstrapping.
 * Clicking on a package that is in multiple categories should update the view
   of the package in both locations on screen. - Done?
 * Remember the view mode - ie if you leave setup in partial, it returns to
   partial automatically.
 * Downloading from the internet should be _able_ to list based on what is
   present in the cache, as opposed to what is installed. (To help building a
   complete install set for a different machine).
 * New view - "action / category / package"
 * New view - show installed packages only. Probably not categorised.
 * Don't ask about the start menu or desktop options if they already exist.
 * Save the manual proxy settings so they don't need to be retyped.
 * Detect files in multiple packages.
 * Save all options.
 * Run a different script after finishing setup.
 * Show bin and src download size.
 * Confirm cancellation of setup if in the middle of doing something.
 * Improve mirror selection UI.
 * Ability to "hold" the version of a package - i.e. never auto-upgrade.

